整个pj由三个类组成，分别是Main,block,game,具体如下：

class Main：
        main（）:打印开始界面、选择是否读档、选择游戏模式
        
        print（）:打印初始界面
        list（）:读取排行榜  （实现方法：利用文件I/O技术，将每次游戏结束后的分数排序后与昵称一起写入文件，并在用户查看排行榜时读取）
        save（）：存档（将当前游戏状态转化为数据存入文件，要储存的数据有：方块位置，方块类型，方块状态，地图，得分）
        load（）：读档（按照顺序从文件中读取数据，附给相应变量）
        cmd1()、cmd2():根据输入的指令进行操作，前者为正常模式，后者为穿越边界模式

      //在写存档的功能中我遇到了一些问题，我的地图原来是用char类型的二维数组表示的，为了方便写入文件
     //我对整个地图进行了重构，转换为int类型的二维数组，把要储存的值全换成了数据

class block
       constructor 用于在游戏中创建一个方块对象
       int[][][] type:用于表示方块类型及形状

       getType():利用随机数，随机生成方块类型
       getTypez（）等：定义各种方块的具体形状与四种不同状态的具体形状
       getNumber:生成随机数

class game：
变量：
      now：block类的对象，表示当前的方块
      next:  block类的对象，表示下一个方块
      int[] arr、ArrayList<Integer> stores：实现排行榜功能，从文件中获取先前的数据与最新的得分数据一起排序，再写入文件中
      int[][] block、int[][][]type：储存方块的状态
      int[][]map1:含有无法移动方块的地图，将其与只含有当前方块的地图数组合并，即可打印完整地图
      Height，Width,state,x,y:基本状态数据，（x,y）是为了定位方块在地图中的位置
      cmd:输入的指令
      score:当前的得分

方法：
      printmap():打印完整地图
      int[][] getmap（）:获取只含有当前方块的动态地图
      holdBlock():当方块无法下落时，将其储存进map1，并生成新方块
      turn（）：实现方块的旋转
      getCmd:获取从键盘输入的命令
      out():结束游戏，并储存当前分数，更新排行榜文件
      clean():当一行全是*时，消去这一行，使其他行都下落一行，并计算得分
      valid0()等：能否移动、旋转的判断方法，思路是如果移动或旋转后，当前方块的位置有map1中的方块或边框，则恢复移动或旋转之前的状态
      move():根据输入的指令，进行移动或旋转的操作

      printmap1()、getmap1()、move1（）：为穿越边模式服务


（这是我独立完成的第一个较为完整的（并不）的项目，开发过程中遇到了无数问题，经常修好了一个bug，又出现另外的bug。不过开学前的我，掌握的编程知识只有先导课本上的那些，
  竟然能写成今天这个样子，真是难以置信！心疼因为熬夜写pj而掉的几百根头发。）
     
     

       

       
                          


